name: "Cloudflare Deploy"
description: "Deploy to Cloudflare Pages"

inputs:
  cloudflare_api_token:
    description: "Cloudflare API Token"
    required: true
  repository:
    description: 'The GitHub repository to deploy, in the format "organization/repository"'
    required: true
  production_branch:
    description: "Production Branch"
    required: true
  output_directory:
    description: "Output Directory"
    required: true
  is_production:
    description: "Deploys to production environment if true, otherwise deploys to preview environment. Default is false."
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Extract repository name
      id: repo_name
      run: echo "REPOSITORY_NAME=$(echo '${{ inputs.repository }}' | cut -d '/' -f 2)" >> $GITHUB_ENV
      shell: bash

    - name: Get source code
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.repository }}

    - name: Verify repository download
      id: verify_repo
      run: |
        if [ -d "${{ inputs.repository }}" ]; then
          echo "Repository ${{ inputs.repository }} was successfully downloaded."
        else
          echo "Failed to download the repository ${{ inputs.repository }}."
          exit 1
        fi
      shell: bash

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20.10.0"

      - name: Set Actions Path
        id: actions_path
        run: echo "ACTIONS_PATH=$(dirname $GITHUB_ACTION_PATH)" >> $GITHUB_ENV
        shell: bash

      - name: Run shell script
        run: |
          bash $ACTIONS_PATH/ubiquity/cloudflare-deploy-action/main/.github/cloudflare-deploy.sh "${{ inputs.repository }}" "${{ inputs.production_branch }}" "${{ inputs.output_directory }}" "${{ inputs.is_production }}"
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}

    # - name: Run shell script
    #   run: |
    #     find ../.. -type d \( -name "node_modules" -o -name ".git" -o -name ".husky" \) -prune -o -print
    #     bash .github/cloudflare-deploy.sh "${{ inputs.repository }}" "${{ inputs.production_branch }}" "${{ inputs.output_directory }}" "${{ inputs.is_production }}"
    #   shell: bash
    #   env:
    #     CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}

    - name: Post Deployment on Pull Request or Commit
      run: |
        yarn tsx .github/post-deployment.ts --url "${{ env.DEPLOYMENT_URL }}" --repository "${{ inputs.repository }}" --is-production "${{ inputs.is_production }}"
      shell: bash
      # env:
      #   DEPLOYMENT_URL: "${{ env.DEPLOYMENT_URL }}
