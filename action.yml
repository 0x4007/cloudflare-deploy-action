name: "Cloudflare Deploy"
description: "Deploy to Cloudflare Pages"

inputs:
  cloudflare_api_token:
    description: "Cloudflare API Token"
    required: true
  repository:
    description: 'The GitHub repository to deploy, in the format "organization/repository"'
    required: true
  production_branch:
    description: "Production Branch"
    required: true
  output_directory:
    description: "Output Directory"
    required: true
  current_branch:
    description: "Compare if not production branch for preview deploys"
    required: true

runs:
  using: "composite"
  steps:
    # - name: Extract repository name
    #   id: repo_name
    #   run: echo "REPOSITORY_NAME=$(echo '${{ inputs.repository }}' | cut -d '/' -f 2)" >> $GITHUB_ENV
    #   shell: bash

    # - name: Get source code
    #   uses: actions/checkout@v4
    #   with:
    #     path: ${{ inputs.repository }}

    # - name: Download preserved directory
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: build-artifacts
    #     path: .

    # - name: Display directory structure
    #   run: |
    #     find .
    #     find ../../_actions
    #   shell: bash

    # - name: Setup Node
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: "20.10.0"

    - name: Run shell script
      run: bash ../../_actions/ubiquity/cloudflare-deploy-action/main/.github/cloudflare-deploy.sh "${{ inputs.repository }}" "${{ inputs.production_branch }}" "${{ inputs.output_directory }}" "${{ inputs.current_branch }}"
      shell: bash
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}

    # - name: Display Wrangler logs
    #   if: always()
    #   run: cat /home/runner/.config/.wrangler/logs/*.log
    #   shell: bash

    - name: Post Deployment on Pull Request or Commit
      run: |
        ls -al
        echo " ===== "
        ls -al ../
        echo " ===== "
        ls -al ../../
        echo " ===== "
        yarn tsx post-deployment.ts --url "${{ env.DEPLOYMENT_URL }}" --repository "${{ inputs.repository }}"
      shell: bash
      env:
        DEPLOYMENT_URL: "${{ env.DEPLOYMENT_URL }}"
